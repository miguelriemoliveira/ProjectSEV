<?xml version="1.0"?>
<!--This launches all the rustbot system-->
<launch>
  <!--arguments-->
  <arg name="do_stereo" default="true"/>
  <arg name="do_fusion" default="false"/>
  <arg name="do_slam" default="true"/>
  <arg name="do_gps" default="false"/>
  <arg name="do_accumulation" default="true"/>
  <arg name="do_zmq_publish" default="false"/>
  <arg name="do_gimbal_motors" default="false"/>
  <arg name="do_auto_track" default="false"/>
  <arg name="do_supercooljoy_gimbal" default="false"/>

  <!--This is for running the system computing the stereo (and the slam) from played back offline data-->
  <arg name="online_stereo" default="false"/>
  <!--To launch a gui for tunning the stereo parameters-->
  <arg name="config_stereo" default="false"/>
  <!--The desired frames per second-->
  <arg name="fps" default="10"/>
  <!--Queue size for the stereo images. More queue size better the possibilities to sync, but more memory required-->
  <arg name="queue_size" default="50"/>
  <!--data fusion-->
  <group if="$(arg do_fusion)">
    <include file="$(find rustbot_bringup)/launch/EKF_fusion.launch">
        </include>
  </group>
  <!--GPS drivers should work only on online mode-->
  <group if="$(arg online_stereo)">
    <group if="$(arg do_gps)">
<!--      <include file="$(find rustbot_bringup)/launch/gps.launch">-->
      <node name="imu_republish_to_enu" pkg="rustbot_bringup" type="imu_republish" output="screen">
          <param name="~/not_sim" value="true"/>
      </node>
<!--        </include>-->
    </group>
  </group>
   <group unless="$(arg do_gps)">
      <node name="imu_republish_to_enu" pkg="rustbot_bringup" type="imu_republish" output="screen">
	<param name="not_sim" value="false"/>
      </node>
    </group>
  <!--Stereo nodes -->
  <group ns="stereo">
    <!--Camera drivers (should work only in online mode)-->
    <group if="$(arg online_stereo)">
      <include file="$(find rustbot_bringup)/launch/left_camera.launch">
        <arg name="fps" value="$(arg fps)"/>
      </include>
      <include file="$(find rustbot_bringup)/launch/right_camera.launch">
        <arg name="fps" value="$(arg fps)"/>
      </include>
    </group>
    <!--Stereo processing-->
    <group if="$(arg do_stereo)">
      <node name="stereo_image_proc" pkg="stereo_image_proc" type="stereo_image_proc" output="screen">
        <param name="approximate_sync" value="true"/>
        <param name="queue_size" value="$(arg queue_size)"/>
	<!--Melhorar visao stereo -->
	<param name="prefilter_size" value="85"/>
        <param name="disparity_range" value="170"/>
	<param name="correlation_window_size" value="5"/>
        <param name="speckle_size" value="1000"/>
	<param name="speckle_range" value="31"/>
	<param name="fullDP" value="true"/>
        <param name="uniqueness_ratio" value="25.0"/>

        <rosparam command="load" file="$(find rustbot_calibration)/calibration/stereo_image_proc.yaml"/>
      </node>
    </group>
  </group>
  <!--Configure stereo-->
  <group if="$(arg config_stereo)">
    <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen">
        </node>
  </group>
  <!--SLAM launch files (several options to do slam. Andry's rtab, Miguel's rtab and Miguel's viso2)-->
  <group if="$(arg do_slam)">
    <!--<include file="$(find rustbot_bringup)/launch/vSLAM_vOdo/crob_play_aux.launch">
    </include>-->
    <!--<include file="$(find rustbot_bringup)/launch/vSLAM_vOdo/crob_slam_rtabmapOdometryMapping.launch">-->
    <!--</include>-->
    <!--<include file="$(find rustbot_bringup)/launch/rtab.launch">-->
    <!--</include>-->
        <group if="$(arg do_fusion)">
	    <include file="$(find rustbot_bringup)/launch/viso2.launch">
		</include>
        </group>
	<group unless="$(arg do_fusion)">
	    <include file="$(find rustbot_bringup)/launch/viso2_withtf.launch">
		</include>
        </group>
  </group>
  <!--Point cloud accumulator-->
  <group if="$(arg do_accumulation)">
    <include file="$(find rustbot_bringup)/launch/accumulate.launch">
        </include>
  </group>

  <group if="$(arg do_zmq_publish)">
    <!--SEV zmq+protobuf publisher-->
    <node name="sev_publisher" pkg="rustbot_translation" type="sev_publisher.py" output="screen">
    </node>
  </group>

  <!-- UFJF SECTION -->

<!--start the gimbal-->
  <group if="$(arg do_gimbal_motors)">
    <include file="$(find dynamixel_workbench_controllers)/launch/multi_port.launch">
    </include>
  </group>

<!--  here start at any cost the automatic tracking node, if necessary-->
<!--the gps.launch could do the trick, but if it is not lanched yet we come with a new mavros node-->
  <group unless="$(arg do_gps)">
    <group unless="$(arg online_stereo)">
      <group if="$(arg do_auto_track)">
        <include file="$(find mavros)/launch/px4.launch"> <!--so we dont launch again the same driver-->
        </include>
        <node name="controle_automatico" pkg="automatico_mrs" type="controle_automatico" output="screen">
        </node>
      </group>
    </group>
  </group>

<!--if it is not automatic, use the joystick to control gimbal if thats the case -->
  <!--parameters for likely Joy-->
  <arg name="nome_stick" default="Logitech Logitech Attack 3"/>
  <arg name="porta" default="/dev/input/js0"/>
  <group unless="$(arg do_auto_track)">
    <group if="$(arg do_supercooljoy_gimbal)">
      <node name="joy_supercool" pkg="joy" type="joy_node" output="screen">
      </node>
    </group>
  </group>


</launch>
